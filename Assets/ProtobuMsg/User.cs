// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Game {

  /// <summary>Holder for reflection information generated from user.proto</summary>
  public static partial class UserReflection {

    #region Descriptor
    /// <summary>File descriptor for user.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static UserReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgp1c2VyLnByb3RvEgRnYW1lIoEBCghSb2xlRGF0YRIlCgliYXNlX2luZm8Y",
            "ASABKAsyEi5nYW1lLlJvbGVCYXNlSW5mbxIjCghiYWdfaW5mbxgCIAEoCzIR",
            "LmdhbWUuUm9sZUJhZ0luZm8SKQoLZnJpZW5kX2luZm8YAyABKAsyFC5nYW1l",
            "LlJvbGVGcmllbmRJbmZvIskBCgxSb2xlQmFzZUluZm8SDwoHdXNlcl9pZBgB",
            "IAEoDRIRCgluaWNrX25hbWUYAiABKAkSDAoEY29pbhgDIAEoDRIPCgdkaWFt",
            "b25kGAQgASgNEhAKCGxvZ2luX3RzGAUgASgNEhEKCWxvZ291dF90cxgGIAEo",
            "DRISCgp1c2VyX2xldmVsGAcgASgNEhAKCHVzZXJfZXhwGAggASgNEhUKDWhl",
            "YWRfZnJhbWVfaWQYCSABKA0SFAoMaGVhZF9pY29uX2lkGAogASgNIjIKCEl0",
            "ZW1JbmZvEgsKA3VpZBgBIAEoBBIKCgJpZBgCIAEoBRINCgVjb3VudBgDIAEo",
            "DSI+CgtSb2xlQmFnSW5mbxIdCgVpdGVtcxgBIAMoCzIOLmdhbWUuSXRlbUlu",
            "Zm8SEAoIYmFnX3NpemUYAiABKA0irQEKDVJvbGVCcmllZkluZm8SDwoHdXNl",
            "cl9pZBgBIAEoDRISCgp1c2VyX2xldmVsGAIgASgNEhEKCXVzZXJfbmljaxgD",
            "IAEoCRIVCg1oZWFkX2ZyYW1lX2lkGAQgASgNEhQKDGhlYWRfaWNvbl9pZBgF",
            "IAEoDRIQCghsb2dpbl90cxgGIAEoDRIRCglsb2dvdXRfdHMYByABKA0SEgoK",
            "ZnJpZW5kX2NudBgIIAEoDSJxCg5Sb2xlRnJpZW5kSW5mbxISCgphcHBseV9s",
            "aXN0GAEgAygNEhcKD3RvZGF5X3NlbmRfbGlzdBgCIAMoDRIaChJ0b2RheV9y",
            "ZWNpZXZlX2xpc3QYAyADKA0SFgoOdG9kYXlfZ2V0X2xpc3QYBCADKA0qRwoQ",
            "RW51bVJvbGVCYXNlUHJvcBISCg5Qcm9wX05pY2tfTmFtZRAAEg0KCVByb3Bf",
            "Q29pbhABEhAKDFByb3BfRGlhbW9uZBACYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Game.EnumRoleBaseProp), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.RoleData), global::Game.RoleData.Parser, new[]{ "BaseInfo", "BagInfo", "FriendInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.RoleBaseInfo), global::Game.RoleBaseInfo.Parser, new[]{ "UserId", "NickName", "Coin", "Diamond", "LoginTs", "LogoutTs", "UserLevel", "UserExp", "HeadFrameId", "HeadIconId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.ItemInfo), global::Game.ItemInfo.Parser, new[]{ "Uid", "Id", "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.RoleBagInfo), global::Game.RoleBagInfo.Parser, new[]{ "Items", "BagSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.RoleBriefInfo), global::Game.RoleBriefInfo.Parser, new[]{ "UserId", "UserLevel", "UserNick", "HeadFrameId", "HeadIconId", "LoginTs", "LogoutTs", "FriendCnt" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.RoleFriendInfo), global::Game.RoleFriendInfo.Parser, new[]{ "ApplyList", "TodaySendList", "TodayRecieveList", "TodayGetList" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum EnumRoleBaseProp {
    [pbr::OriginalName("Prop_Nick_Name")] PropNickName = 0,
    [pbr::OriginalName("Prop_Coin")] PropCoin = 1,
    [pbr::OriginalName("Prop_Diamond")] PropDiamond = 2,
  }

  #endregion

  #region Messages
  /// <summary>
  /// 角色对象所有数据
  /// </summary>
  public sealed partial class RoleData : pb::IMessage<RoleData> {
    private static readonly pb::MessageParser<RoleData> _parser = new pb::MessageParser<RoleData>(() => new RoleData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.UserReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleData(RoleData other) : this() {
      BaseInfo = other.baseInfo_ != null ? other.BaseInfo.Clone() : null;
      BagInfo = other.bagInfo_ != null ? other.BagInfo.Clone() : null;
      FriendInfo = other.friendInfo_ != null ? other.FriendInfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleData Clone() {
      return new RoleData(this);
    }

    /// <summary>Field number for the "base_info" field.</summary>
    public const int BaseInfoFieldNumber = 1;
    private global::Game.RoleBaseInfo baseInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Game.RoleBaseInfo BaseInfo {
      get { return baseInfo_; }
      set {
        baseInfo_ = value;
      }
    }

    /// <summary>Field number for the "bag_info" field.</summary>
    public const int BagInfoFieldNumber = 2;
    private global::Game.RoleBagInfo bagInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Game.RoleBagInfo BagInfo {
      get { return bagInfo_; }
      set {
        bagInfo_ = value;
      }
    }

    /// <summary>Field number for the "friend_info" field.</summary>
    public const int FriendInfoFieldNumber = 3;
    private global::Game.RoleFriendInfo friendInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Game.RoleFriendInfo FriendInfo {
      get { return friendInfo_; }
      set {
        friendInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoleData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoleData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(BaseInfo, other.BaseInfo)) return false;
      if (!object.Equals(BagInfo, other.BagInfo)) return false;
      if (!object.Equals(FriendInfo, other.FriendInfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (baseInfo_ != null) hash ^= BaseInfo.GetHashCode();
      if (bagInfo_ != null) hash ^= BagInfo.GetHashCode();
      if (friendInfo_ != null) hash ^= FriendInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (baseInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BaseInfo);
      }
      if (bagInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BagInfo);
      }
      if (friendInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(FriendInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (baseInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseInfo);
      }
      if (bagInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BagInfo);
      }
      if (friendInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FriendInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoleData other) {
      if (other == null) {
        return;
      }
      if (other.baseInfo_ != null) {
        if (baseInfo_ == null) {
          baseInfo_ = new global::Game.RoleBaseInfo();
        }
        BaseInfo.MergeFrom(other.BaseInfo);
      }
      if (other.bagInfo_ != null) {
        if (bagInfo_ == null) {
          bagInfo_ = new global::Game.RoleBagInfo();
        }
        BagInfo.MergeFrom(other.BagInfo);
      }
      if (other.friendInfo_ != null) {
        if (friendInfo_ == null) {
          friendInfo_ = new global::Game.RoleFriendInfo();
        }
        FriendInfo.MergeFrom(other.FriendInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (baseInfo_ == null) {
              baseInfo_ = new global::Game.RoleBaseInfo();
            }
            input.ReadMessage(baseInfo_);
            break;
          }
          case 18: {
            if (bagInfo_ == null) {
              bagInfo_ = new global::Game.RoleBagInfo();
            }
            input.ReadMessage(bagInfo_);
            break;
          }
          case 26: {
            if (friendInfo_ == null) {
              friendInfo_ = new global::Game.RoleFriendInfo();
            }
            input.ReadMessage(friendInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 角色基础数据
  /// </summary>
  public sealed partial class RoleBaseInfo : pb::IMessage<RoleBaseInfo> {
    private static readonly pb::MessageParser<RoleBaseInfo> _parser = new pb::MessageParser<RoleBaseInfo>(() => new RoleBaseInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleBaseInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.UserReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleBaseInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleBaseInfo(RoleBaseInfo other) : this() {
      userId_ = other.userId_;
      nickName_ = other.nickName_;
      coin_ = other.coin_;
      diamond_ = other.diamond_;
      loginTs_ = other.loginTs_;
      logoutTs_ = other.logoutTs_;
      userLevel_ = other.userLevel_;
      userExp_ = other.userExp_;
      headFrameId_ = other.headFrameId_;
      headIconId_ = other.headIconId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleBaseInfo Clone() {
      return new RoleBaseInfo(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private uint userId_;
    /// <summary>
    /// 角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "nick_name" field.</summary>
    public const int NickNameFieldNumber = 2;
    private string nickName_ = "";
    /// <summary>
    /// 昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NickName {
      get { return nickName_; }
      set {
        nickName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "coin" field.</summary>
    public const int CoinFieldNumber = 3;
    private uint coin_;
    /// <summary>
    /// 金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Coin {
      get { return coin_; }
      set {
        coin_ = value;
      }
    }

    /// <summary>Field number for the "diamond" field.</summary>
    public const int DiamondFieldNumber = 4;
    private uint diamond_;
    /// <summary>
    /// 钻石
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Diamond {
      get { return diamond_; }
      set {
        diamond_ = value;
      }
    }

    /// <summary>Field number for the "login_ts" field.</summary>
    public const int LoginTsFieldNumber = 5;
    private uint loginTs_;
    /// <summary>
    /// 登录时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LoginTs {
      get { return loginTs_; }
      set {
        loginTs_ = value;
      }
    }

    /// <summary>Field number for the "logout_ts" field.</summary>
    public const int LogoutTsFieldNumber = 6;
    private uint logoutTs_;
    /// <summary>
    /// 登出时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LogoutTs {
      get { return logoutTs_; }
      set {
        logoutTs_ = value;
      }
    }

    /// <summary>Field number for the "user_level" field.</summary>
    public const int UserLevelFieldNumber = 7;
    private uint userLevel_;
    /// <summary>
    /// 等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserLevel {
      get { return userLevel_; }
      set {
        userLevel_ = value;
      }
    }

    /// <summary>Field number for the "user_exp" field.</summary>
    public const int UserExpFieldNumber = 8;
    private uint userExp_;
    /// <summary>
    /// 经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserExp {
      get { return userExp_; }
      set {
        userExp_ = value;
      }
    }

    /// <summary>Field number for the "head_frame_id" field.</summary>
    public const int HeadFrameIdFieldNumber = 9;
    private uint headFrameId_;
    /// <summary>
    /// 头像框
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeadFrameId {
      get { return headFrameId_; }
      set {
        headFrameId_ = value;
      }
    }

    /// <summary>Field number for the "head_icon_id" field.</summary>
    public const int HeadIconIdFieldNumber = 10;
    private uint headIconId_;
    /// <summary>
    /// 头像id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeadIconId {
      get { return headIconId_; }
      set {
        headIconId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoleBaseInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoleBaseInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (NickName != other.NickName) return false;
      if (Coin != other.Coin) return false;
      if (Diamond != other.Diamond) return false;
      if (LoginTs != other.LoginTs) return false;
      if (LogoutTs != other.LogoutTs) return false;
      if (UserLevel != other.UserLevel) return false;
      if (UserExp != other.UserExp) return false;
      if (HeadFrameId != other.HeadFrameId) return false;
      if (HeadIconId != other.HeadIconId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (NickName.Length != 0) hash ^= NickName.GetHashCode();
      if (Coin != 0) hash ^= Coin.GetHashCode();
      if (Diamond != 0) hash ^= Diamond.GetHashCode();
      if (LoginTs != 0) hash ^= LoginTs.GetHashCode();
      if (LogoutTs != 0) hash ^= LogoutTs.GetHashCode();
      if (UserLevel != 0) hash ^= UserLevel.GetHashCode();
      if (UserExp != 0) hash ^= UserExp.GetHashCode();
      if (HeadFrameId != 0) hash ^= HeadFrameId.GetHashCode();
      if (HeadIconId != 0) hash ^= HeadIconId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UserId);
      }
      if (NickName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NickName);
      }
      if (Coin != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Coin);
      }
      if (Diamond != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Diamond);
      }
      if (LoginTs != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(LoginTs);
      }
      if (LogoutTs != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(LogoutTs);
      }
      if (UserLevel != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(UserLevel);
      }
      if (UserExp != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(UserExp);
      }
      if (HeadFrameId != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(HeadFrameId);
      }
      if (HeadIconId != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(HeadIconId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserId);
      }
      if (NickName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NickName);
      }
      if (Coin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Coin);
      }
      if (Diamond != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Diamond);
      }
      if (LoginTs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LoginTs);
      }
      if (LogoutTs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LogoutTs);
      }
      if (UserLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserLevel);
      }
      if (UserExp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserExp);
      }
      if (HeadFrameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeadFrameId);
      }
      if (HeadIconId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeadIconId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoleBaseInfo other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      if (other.NickName.Length != 0) {
        NickName = other.NickName;
      }
      if (other.Coin != 0) {
        Coin = other.Coin;
      }
      if (other.Diamond != 0) {
        Diamond = other.Diamond;
      }
      if (other.LoginTs != 0) {
        LoginTs = other.LoginTs;
      }
      if (other.LogoutTs != 0) {
        LogoutTs = other.LogoutTs;
      }
      if (other.UserLevel != 0) {
        UserLevel = other.UserLevel;
      }
      if (other.UserExp != 0) {
        UserExp = other.UserExp;
      }
      if (other.HeadFrameId != 0) {
        HeadFrameId = other.HeadFrameId;
      }
      if (other.HeadIconId != 0) {
        HeadIconId = other.HeadIconId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt32();
            break;
          }
          case 18: {
            NickName = input.ReadString();
            break;
          }
          case 24: {
            Coin = input.ReadUInt32();
            break;
          }
          case 32: {
            Diamond = input.ReadUInt32();
            break;
          }
          case 40: {
            LoginTs = input.ReadUInt32();
            break;
          }
          case 48: {
            LogoutTs = input.ReadUInt32();
            break;
          }
          case 56: {
            UserLevel = input.ReadUInt32();
            break;
          }
          case 64: {
            UserExp = input.ReadUInt32();
            break;
          }
          case 72: {
            HeadFrameId = input.ReadUInt32();
            break;
          }
          case 80: {
            HeadIconId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 道具信息
  /// </summary>
  public sealed partial class ItemInfo : pb::IMessage<ItemInfo> {
    private static readonly pb::MessageParser<ItemInfo> _parser = new pb::MessageParser<ItemInfo>(() => new ItemInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.UserReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemInfo(ItemInfo other) : this() {
      uid_ = other.uid_;
      id_ = other.id_;
      count_ = other.count_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemInfo Clone() {
      return new ItemInfo(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private ulong uid_;
    /// <summary>
    ///  实例id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private int id_;
    /// <summary>
    ///  道具配置ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 3;
    private uint count_;
    /// <summary>
    ///  道具数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Id != other.Id) return false;
      if (Count != other.Count) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0UL) hash ^= Uid.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Uid);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Id);
      }
      if (Count != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uid);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemInfo other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0UL) {
        Uid = other.Uid;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt64();
            break;
          }
          case 16: {
            Id = input.ReadInt32();
            break;
          }
          case 24: {
            Count = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 角色背包数据
  /// </summary>
  public sealed partial class RoleBagInfo : pb::IMessage<RoleBagInfo> {
    private static readonly pb::MessageParser<RoleBagInfo> _parser = new pb::MessageParser<RoleBagInfo>(() => new RoleBagInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleBagInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.UserReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleBagInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleBagInfo(RoleBagInfo other) : this() {
      items_ = other.items_.Clone();
      bagSize_ = other.bagSize_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleBagInfo Clone() {
      return new RoleBagInfo(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Game.ItemInfo> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::Game.ItemInfo.Parser);
    private readonly pbc::RepeatedField<global::Game.ItemInfo> items_ = new pbc::RepeatedField<global::Game.ItemInfo>();
    /// <summary>
    ///  玩家道具
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Game.ItemInfo> Items {
      get { return items_; }
    }

    /// <summary>Field number for the "bag_size" field.</summary>
    public const int BagSizeFieldNumber = 2;
    private uint bagSize_;
    /// <summary>
    ///  背包大小
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BagSize {
      get { return bagSize_; }
      set {
        bagSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoleBagInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoleBagInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      if (BagSize != other.BagSize) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (BagSize != 0) hash ^= BagSize.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (BagSize != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(BagSize);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (BagSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BagSize);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoleBagInfo other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      if (other.BagSize != 0) {
        BagSize = other.BagSize;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
          case 16: {
            BagSize = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 玩家基础信息
  /// </summary>
  public sealed partial class RoleBriefInfo : pb::IMessage<RoleBriefInfo> {
    private static readonly pb::MessageParser<RoleBriefInfo> _parser = new pb::MessageParser<RoleBriefInfo>(() => new RoleBriefInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleBriefInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.UserReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleBriefInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleBriefInfo(RoleBriefInfo other) : this() {
      userId_ = other.userId_;
      userLevel_ = other.userLevel_;
      userNick_ = other.userNick_;
      headFrameId_ = other.headFrameId_;
      headIconId_ = other.headIconId_;
      loginTs_ = other.loginTs_;
      logoutTs_ = other.logoutTs_;
      friendCnt_ = other.friendCnt_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleBriefInfo Clone() {
      return new RoleBriefInfo(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private uint userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "user_level" field.</summary>
    public const int UserLevelFieldNumber = 2;
    private uint userLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserLevel {
      get { return userLevel_; }
      set {
        userLevel_ = value;
      }
    }

    /// <summary>Field number for the "user_nick" field.</summary>
    public const int UserNickFieldNumber = 3;
    private string userNick_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserNick {
      get { return userNick_; }
      set {
        userNick_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "head_frame_id" field.</summary>
    public const int HeadFrameIdFieldNumber = 4;
    private uint headFrameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeadFrameId {
      get { return headFrameId_; }
      set {
        headFrameId_ = value;
      }
    }

    /// <summary>Field number for the "head_icon_id" field.</summary>
    public const int HeadIconIdFieldNumber = 5;
    private uint headIconId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeadIconId {
      get { return headIconId_; }
      set {
        headIconId_ = value;
      }
    }

    /// <summary>Field number for the "login_ts" field.</summary>
    public const int LoginTsFieldNumber = 6;
    private uint loginTs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LoginTs {
      get { return loginTs_; }
      set {
        loginTs_ = value;
      }
    }

    /// <summary>Field number for the "logout_ts" field.</summary>
    public const int LogoutTsFieldNumber = 7;
    private uint logoutTs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LogoutTs {
      get { return logoutTs_; }
      set {
        logoutTs_ = value;
      }
    }

    /// <summary>Field number for the "friend_cnt" field.</summary>
    public const int FriendCntFieldNumber = 8;
    private uint friendCnt_;
    /// <summary>
    /// 好友数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FriendCnt {
      get { return friendCnt_; }
      set {
        friendCnt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoleBriefInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoleBriefInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (UserLevel != other.UserLevel) return false;
      if (UserNick != other.UserNick) return false;
      if (HeadFrameId != other.HeadFrameId) return false;
      if (HeadIconId != other.HeadIconId) return false;
      if (LoginTs != other.LoginTs) return false;
      if (LogoutTs != other.LogoutTs) return false;
      if (FriendCnt != other.FriendCnt) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (UserLevel != 0) hash ^= UserLevel.GetHashCode();
      if (UserNick.Length != 0) hash ^= UserNick.GetHashCode();
      if (HeadFrameId != 0) hash ^= HeadFrameId.GetHashCode();
      if (HeadIconId != 0) hash ^= HeadIconId.GetHashCode();
      if (LoginTs != 0) hash ^= LoginTs.GetHashCode();
      if (LogoutTs != 0) hash ^= LogoutTs.GetHashCode();
      if (FriendCnt != 0) hash ^= FriendCnt.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UserId);
      }
      if (UserLevel != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(UserLevel);
      }
      if (UserNick.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(UserNick);
      }
      if (HeadFrameId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(HeadFrameId);
      }
      if (HeadIconId != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(HeadIconId);
      }
      if (LoginTs != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(LoginTs);
      }
      if (LogoutTs != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(LogoutTs);
      }
      if (FriendCnt != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(FriendCnt);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserId);
      }
      if (UserLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserLevel);
      }
      if (UserNick.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserNick);
      }
      if (HeadFrameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeadFrameId);
      }
      if (HeadIconId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeadIconId);
      }
      if (LoginTs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LoginTs);
      }
      if (LogoutTs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LogoutTs);
      }
      if (FriendCnt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FriendCnt);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoleBriefInfo other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      if (other.UserLevel != 0) {
        UserLevel = other.UserLevel;
      }
      if (other.UserNick.Length != 0) {
        UserNick = other.UserNick;
      }
      if (other.HeadFrameId != 0) {
        HeadFrameId = other.HeadFrameId;
      }
      if (other.HeadIconId != 0) {
        HeadIconId = other.HeadIconId;
      }
      if (other.LoginTs != 0) {
        LoginTs = other.LoginTs;
      }
      if (other.LogoutTs != 0) {
        LogoutTs = other.LogoutTs;
      }
      if (other.FriendCnt != 0) {
        FriendCnt = other.FriendCnt;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt32();
            break;
          }
          case 16: {
            UserLevel = input.ReadUInt32();
            break;
          }
          case 26: {
            UserNick = input.ReadString();
            break;
          }
          case 32: {
            HeadFrameId = input.ReadUInt32();
            break;
          }
          case 40: {
            HeadIconId = input.ReadUInt32();
            break;
          }
          case 48: {
            LoginTs = input.ReadUInt32();
            break;
          }
          case 56: {
            LogoutTs = input.ReadUInt32();
            break;
          }
          case 64: {
            FriendCnt = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 角色好友数据
  /// </summary>
  public sealed partial class RoleFriendInfo : pb::IMessage<RoleFriendInfo> {
    private static readonly pb::MessageParser<RoleFriendInfo> _parser = new pb::MessageParser<RoleFriendInfo>(() => new RoleFriendInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleFriendInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.UserReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleFriendInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleFriendInfo(RoleFriendInfo other) : this() {
      applyList_ = other.applyList_.Clone();
      todaySendList_ = other.todaySendList_.Clone();
      todayRecieveList_ = other.todayRecieveList_.Clone();
      todayGetList_ = other.todayGetList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleFriendInfo Clone() {
      return new RoleFriendInfo(this);
    }

    /// <summary>Field number for the "apply_list" field.</summary>
    public const int ApplyListFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_applyList_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> applyList_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///  申请列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> ApplyList {
      get { return applyList_; }
    }

    /// <summary>Field number for the "today_send_list" field.</summary>
    public const int TodaySendListFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_todaySendList_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> todaySendList_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///  当天发送id列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> TodaySendList {
      get { return todaySendList_; }
    }

    /// <summary>Field number for the "today_recieve_list" field.</summary>
    public const int TodayRecieveListFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_todayRecieveList_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> todayRecieveList_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///  当天接收id列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> TodayRecieveList {
      get { return todayRecieveList_; }
    }

    /// <summary>Field number for the "today_get_list" field.</summary>
    public const int TodayGetListFieldNumber = 4;
    private static readonly pb::FieldCodec<uint> _repeated_todayGetList_codec
        = pb::FieldCodec.ForUInt32(34);
    private readonly pbc::RepeatedField<uint> todayGetList_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///  当天领取id列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> TodayGetList {
      get { return todayGetList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoleFriendInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoleFriendInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!applyList_.Equals(other.applyList_)) return false;
      if(!todaySendList_.Equals(other.todaySendList_)) return false;
      if(!todayRecieveList_.Equals(other.todayRecieveList_)) return false;
      if(!todayGetList_.Equals(other.todayGetList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= applyList_.GetHashCode();
      hash ^= todaySendList_.GetHashCode();
      hash ^= todayRecieveList_.GetHashCode();
      hash ^= todayGetList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      applyList_.WriteTo(output, _repeated_applyList_codec);
      todaySendList_.WriteTo(output, _repeated_todaySendList_codec);
      todayRecieveList_.WriteTo(output, _repeated_todayRecieveList_codec);
      todayGetList_.WriteTo(output, _repeated_todayGetList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += applyList_.CalculateSize(_repeated_applyList_codec);
      size += todaySendList_.CalculateSize(_repeated_todaySendList_codec);
      size += todayRecieveList_.CalculateSize(_repeated_todayRecieveList_codec);
      size += todayGetList_.CalculateSize(_repeated_todayGetList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoleFriendInfo other) {
      if (other == null) {
        return;
      }
      applyList_.Add(other.applyList_);
      todaySendList_.Add(other.todaySendList_);
      todayRecieveList_.Add(other.todayRecieveList_);
      todayGetList_.Add(other.todayGetList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            applyList_.AddEntriesFrom(input, _repeated_applyList_codec);
            break;
          }
          case 18:
          case 16: {
            todaySendList_.AddEntriesFrom(input, _repeated_todaySendList_codec);
            break;
          }
          case 26:
          case 24: {
            todayRecieveList_.AddEntriesFrom(input, _repeated_todayRecieveList_codec);
            break;
          }
          case 34:
          case 32: {
            todayGetList_.AddEntriesFrom(input, _repeated_todayGetList_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
