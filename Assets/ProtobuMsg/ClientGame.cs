// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_game.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Game {

  /// <summary>Holder for reflection information generated from client_game.proto</summary>
  public static partial class ClientGameReflection {

    #region Descriptor
    /// <summary>File descriptor for client_game.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ClientGameReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFjbGllbnRfZ2FtZS5wcm90bxIEZ2FtZRoKdXNlci5wcm90byIhCg5DU0xv",
            "Z2luR2FtZVJlcRIPCgd1c2VyX2lkGAEgASgNIlUKDlNDTG9naW5HYW1lQWNr",
            "Eg0KBWVycm9yGAEgASgNEhEKCW5pY2tfbmFtZRgCIAEoCRIhCglyb2xlX2Rh",
            "dGEYAyABKAsyDi5nYW1lLlJvbGVEYXRhIiUKEENTU2V0Tmlja05hbWVSZXES",
            "EQoJbmlja19uYW1lGAEgASgJIiIKEFNDU2V0Tmlja05hbWVBY2sSDgoGcmVz",
            "dWx0GAEgASgNIiAKDkNTR01Db21tYW5kUmVxEg4KBmdtX2NtZBgBIAEoCSIg",
            "Cg5TQ0dNQ29tbWFuZEFjaxIOCgZyZXN1bHQYASABKAgiHgoNU0NLaWNrVXNl",
            "ck50ZhINCgVlcnJvchgBIAEoDSIMCgpTQ0Vycm9yTnRmIjQKD1NDSXRlbUNo",
            "YW5nZU50ZhIhCglpdGVtX2xpc3QYASADKAsyDi5nYW1lLkl0ZW1JbmZvIjgK",
            "EENTT3BlcmF0ZUl0ZW1SZXESEAoIaXRlbV91aWQYASABKAQSEgoKaXRlbV9j",
            "b3VudBgCIAEoDSISChBTQ09wZXJhdGVJdGVtQWNrIlUKF1NDVXBkYXRlVXNl",
            "ckJhc2VJbmZvTnRmEiUKCWJhc2VfaW5mbxgBIAEoCzISLmdhbWUuUm9sZUJh",
            "c2VJbmZvEhMKC2NoYW5nZV9mbGFnGAIgASgEIoMBCglDU0NoYXRSZXESIgoJ",
            "Y2hhdF90eXBlGAEgASgOMg8uZ2FtZS5FQ2hhdFR5cGUSKQoNY2hhdF9tc2df",
            "dHlwZRgCIAEoDjISLmdhbWUuRUNoYXRNc2dUeXBlEhMKC21zZ19jb250ZW50",
            "GAMgASgJEhIKCnRvX3VzZXJfaWQYBCABKA0inQEKCVNDQ2hhdEFjaxIiCglj",
            "aGF0X3R5cGUYASABKA4yDy5nYW1lLkVDaGF0VHlwZRIpCg1jaGF0X21zZ190",
            "eXBlGAIgASgOMhIuZ2FtZS5FQ2hhdE1zZ1R5cGUSEwoLbXNnX2NvbnRlbnQY",
            "AyABKAkSLAoPcm9sZV9icmllZl9pbmZvGAQgASgLMhMuZ2FtZS5Sb2xlQnJp",
            "ZWZJbmZvIiUKDkNTQWRkRnJpZW5kUmVxEhMKC2FkZF91c2VyX2lkGAEgASgN",
            "IhAKDlNDQWRkRnJpZW5kQWNrIhUKE1NDQWRkRnJpZW5kQXBwbHlOdGYiVwoX",
            "Q1NPcGVyYXRlRnJpZW5kQXBwbHlSZXESEQoJdGFyZ2V0X2lkGAEgASgNEikK",
            "B29wX3R5cGUYAiABKA4yGC5nYW1lLkVGcmllbmRBcHBseU9wVHlwZSIZChdT",
            "Q09wZXJhdGVGcmllbmRBcHBseUFjayIjCg5TQ0FkZEZyaWVuZE50ZhIRCglm",
            "cmllbmRfaWQYASABKA0iJgoRQ1NEZWxldGVGcmllbmRSZXESEQoJdGFyZ2V0",
            "X2lkGAEgASgNIhMKEVNDRGVsZXRlRnJpZW5kQWNrIiYKEVNDRGVsZXRlRnJp",
            "ZW5kTnRmEhEKCWZyaWVuZF9pZBgBIAEoDSInChRDU1F1ZXJ5RnJpZW5kTGlz",
            "dFJlcRIPCgd1c2VyX2lkGAEgASgNIk8KFFNDUXVlcnlGcmllbmRMaXN0QWNr",
            "Eg0KBWVycm9yGAEgASgFEigKC2ZyaWVuZF9saXN0GAIgAygLMhMuZ2FtZS5S",
            "b2xlQnJpZWZJbmZvIj0KF0NTRnJpZW5kUG9pbnRPcGVyYXRlUmVxEhEKCXRh",
            "cmdldF9pZBgBIAEoDRIPCgdpc19zZW5kGAIgASgIIhkKF1NDRnJpZW5kUG9p",
            "bnRPcGVyYXRlQWNrImIKFlNDRnJpZW5kUG9pbnRSZWNvcmROdGYSFwoPdG9k",
            "YXlfc2VuZF9saXN0GAEgAygNEhYKDnRvZGF5X2dldF9saXN0GAIgAygNEhcK",
            "D3RvZGF5X3JlY3ZfbGlzdBgDIAMoDSInChRTQ0ZyaWVuZFBvaW50UmVjdk50",
            "ZhIPCgdmcm9tX2lkGAEgASgNIhsKGUNTUXVlcnlGcmllbmRBcHBseUxpc3RS",
            "ZXEiRAoZU0NRdWVyeUZyaWVuZEFwcGx5TGlzdEFjaxInCgphcHBseV9saXN0",
            "GAEgAygLMhMuZ2FtZS5Sb2xlQnJpZWZJbmZvKmMKCUVDaGF0VHlwZRIVChFF",
            "Q2hhdFR5cGVfSW52YWxpZBAAEhMKD0VDaGF0VHlwZV9Xb3JsZBABEhMKD0VD",
            "aGF0VHlwZV9HdWlsZBACEhUKEUVDaGF0VHlwZV9Qcml2YXRlEAMqfQoMRUNo",
            "YXRNc2dUeXBlEhgKFEVDaGF0TXNnVHlwZV9JbnZhbGlkEAASGgoWRUNoYXRN",
            "c2dUeXBlX05vcm1hbE1zZxABEhkKFUVDaGF0TXNnVHlwZV9TaG93SGVybxAC",
            "EhwKGEVDaGF0TXNnVHlwZV9HdWlsZEludml0ZRADKpQBChJFRnJpZW5kQXBw",
            "bHlPcFR5cGUSHgoaRUZyaWVuZEFwcGx5T3BUeXBlX0ludmFsaWQQABIdChlF",
            "RnJpZW5kQXBwbHlPcFR5cGVfQWNjZXB0EAESHQoZRUZyaWVuZEFwcGx5T3BU",
            "eXBlX0RlbGV0ZRACEiAKHEVGcmllbmRBcHBseU9wVHlwZV9EZWxldGVBbGwQ",
            "A2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Game.UserReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Game.EChatType), typeof(global::Game.EChatMsgType), typeof(global::Game.EFriendApplyOpType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.CSLoginGameReq), global::Game.CSLoginGameReq.Parser, new[]{ "UserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.SCLoginGameAck), global::Game.SCLoginGameAck.Parser, new[]{ "Error", "NickName", "RoleData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.CSSetNickNameReq), global::Game.CSSetNickNameReq.Parser, new[]{ "NickName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.SCSetNickNameAck), global::Game.SCSetNickNameAck.Parser, new[]{ "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.CSGMCommandReq), global::Game.CSGMCommandReq.Parser, new[]{ "GmCmd" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.SCGMCommandAck), global::Game.SCGMCommandAck.Parser, new[]{ "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.SCKickUserNtf), global::Game.SCKickUserNtf.Parser, new[]{ "Error" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.SCErrorNtf), global::Game.SCErrorNtf.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.SCItemChangeNtf), global::Game.SCItemChangeNtf.Parser, new[]{ "ItemList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.CSOperateItemReq), global::Game.CSOperateItemReq.Parser, new[]{ "ItemUid", "ItemCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.SCOperateItemAck), global::Game.SCOperateItemAck.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.SCUpdateUserBaseInfoNtf), global::Game.SCUpdateUserBaseInfoNtf.Parser, new[]{ "BaseInfo", "ChangeFlag" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.CSChatReq), global::Game.CSChatReq.Parser, new[]{ "ChatType", "ChatMsgType", "MsgContent", "ToUserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.SCChatAck), global::Game.SCChatAck.Parser, new[]{ "ChatType", "ChatMsgType", "MsgContent", "RoleBriefInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.CSAddFriendReq), global::Game.CSAddFriendReq.Parser, new[]{ "AddUserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.SCAddFriendAck), global::Game.SCAddFriendAck.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.SCAddFriendApplyNtf), global::Game.SCAddFriendApplyNtf.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.CSOperateFriendApplyReq), global::Game.CSOperateFriendApplyReq.Parser, new[]{ "TargetId", "OpType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.SCOperateFriendApplyAck), global::Game.SCOperateFriendApplyAck.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.SCAddFriendNtf), global::Game.SCAddFriendNtf.Parser, new[]{ "FriendId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.CSDeleteFriendReq), global::Game.CSDeleteFriendReq.Parser, new[]{ "TargetId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.SCDeleteFriendAck), global::Game.SCDeleteFriendAck.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.SCDeleteFriendNtf), global::Game.SCDeleteFriendNtf.Parser, new[]{ "FriendId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.CSQueryFriendListReq), global::Game.CSQueryFriendListReq.Parser, new[]{ "UserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.SCQueryFriendListAck), global::Game.SCQueryFriendListAck.Parser, new[]{ "Error", "FriendList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.CSFriendPointOperateReq), global::Game.CSFriendPointOperateReq.Parser, new[]{ "TargetId", "IsSend" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.SCFriendPointOperateAck), global::Game.SCFriendPointOperateAck.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.SCFriendPointRecordNtf), global::Game.SCFriendPointRecordNtf.Parser, new[]{ "TodaySendList", "TodayGetList", "TodayRecvList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.SCFriendPointRecvNtf), global::Game.SCFriendPointRecvNtf.Parser, new[]{ "FromId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.CSQueryFriendApplyListReq), global::Game.CSQueryFriendApplyListReq.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Game.SCQueryFriendApplyListAck), global::Game.SCQueryFriendApplyListAck.Parser, new[]{ "ApplyList" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// 聊天类型
  /// </summary>
  public enum EChatType {
    [pbr::OriginalName("EChatType_Invalid")] Invalid = 0,
    [pbr::OriginalName("EChatType_World")] World = 1,
    [pbr::OriginalName("EChatType_Guild")] Guild = 2,
    [pbr::OriginalName("EChatType_Private")] Private = 3,
  }

  /// <summary>
  /// 聊天信息类型
  /// </summary>
  public enum EChatMsgType {
    [pbr::OriginalName("EChatMsgType_Invalid")] Invalid = 0,
    /// <summary>
    /// 普通信息
    /// </summary>
    [pbr::OriginalName("EChatMsgType_NormalMsg")] NormalMsg = 1,
    /// <summary>
    /// 展示英雄
    /// </summary>
    [pbr::OriginalName("EChatMsgType_ShowHero")] ShowHero = 2,
    /// <summary>
    /// 公会邀请
    /// </summary>
    [pbr::OriginalName("EChatMsgType_GuildInvite")] GuildInvite = 3,
  }

  public enum EFriendApplyOpType {
    [pbr::OriginalName("EFriendApplyOpType_Invalid")] Invalid = 0,
    [pbr::OriginalName("EFriendApplyOpType_Accept")] Accept = 1,
    [pbr::OriginalName("EFriendApplyOpType_Delete")] Delete = 2,
    [pbr::OriginalName("EFriendApplyOpType_DeleteAll")] DeleteAll = 3,
  }

  #endregion

  #region Messages
  /// <summary>
  /// 客户端登录请求
  /// </summary>
  public sealed partial class CSLoginGameReq : pb::IMessage<CSLoginGameReq> {
    private static readonly pb::MessageParser<CSLoginGameReq> _parser = new pb::MessageParser<CSLoginGameReq>(() => new CSLoginGameReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSLoginGameReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.ClientGameReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSLoginGameReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSLoginGameReq(CSLoginGameReq other) : this() {
      userId_ = other.userId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSLoginGameReq Clone() {
      return new CSLoginGameReq(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private uint userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSLoginGameReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSLoginGameReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0) hash ^= UserId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UserId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSLoginGameReq other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 客户端登录回应
  /// </summary>
  public sealed partial class SCLoginGameAck : pb::IMessage<SCLoginGameAck> {
    private static readonly pb::MessageParser<SCLoginGameAck> _parser = new pb::MessageParser<SCLoginGameAck>(() => new SCLoginGameAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCLoginGameAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.ClientGameReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCLoginGameAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCLoginGameAck(SCLoginGameAck other) : this() {
      error_ = other.error_;
      nickName_ = other.nickName_;
      RoleData = other.roleData_ != null ? other.RoleData.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCLoginGameAck Clone() {
      return new SCLoginGameAck(this);
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 1;
    private uint error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    /// <summary>Field number for the "nick_name" field.</summary>
    public const int NickNameFieldNumber = 2;
    private string nickName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NickName {
      get { return nickName_; }
      set {
        nickName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "role_data" field.</summary>
    public const int RoleDataFieldNumber = 3;
    private global::Game.RoleData roleData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Game.RoleData RoleData {
      get { return roleData_; }
      set {
        roleData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCLoginGameAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCLoginGameAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Error != other.Error) return false;
      if (NickName != other.NickName) return false;
      if (!object.Equals(RoleData, other.RoleData)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Error != 0) hash ^= Error.GetHashCode();
      if (NickName.Length != 0) hash ^= NickName.GetHashCode();
      if (roleData_ != null) hash ^= RoleData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Error != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Error);
      }
      if (NickName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NickName);
      }
      if (roleData_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RoleData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Error != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Error);
      }
      if (NickName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NickName);
      }
      if (roleData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoleData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCLoginGameAck other) {
      if (other == null) {
        return;
      }
      if (other.Error != 0) {
        Error = other.Error;
      }
      if (other.NickName.Length != 0) {
        NickName = other.NickName;
      }
      if (other.roleData_ != null) {
        if (roleData_ == null) {
          roleData_ = new global::Game.RoleData();
        }
        RoleData.MergeFrom(other.RoleData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Error = input.ReadUInt32();
            break;
          }
          case 18: {
            NickName = input.ReadString();
            break;
          }
          case 26: {
            if (roleData_ == null) {
              roleData_ = new global::Game.RoleData();
            }
            input.ReadMessage(roleData_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 设置角色名
  /// </summary>
  public sealed partial class CSSetNickNameReq : pb::IMessage<CSSetNickNameReq> {
    private static readonly pb::MessageParser<CSSetNickNameReq> _parser = new pb::MessageParser<CSSetNickNameReq>(() => new CSSetNickNameReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSetNickNameReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.ClientGameReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSetNickNameReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSetNickNameReq(CSSetNickNameReq other) : this() {
      nickName_ = other.nickName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSSetNickNameReq Clone() {
      return new CSSetNickNameReq(this);
    }

    /// <summary>Field number for the "nick_name" field.</summary>
    public const int NickNameFieldNumber = 1;
    private string nickName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NickName {
      get { return nickName_; }
      set {
        nickName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSSetNickNameReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSSetNickNameReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NickName != other.NickName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NickName.Length != 0) hash ^= NickName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NickName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(NickName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NickName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NickName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSSetNickNameReq other) {
      if (other == null) {
        return;
      }
      if (other.NickName.Length != 0) {
        NickName = other.NickName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            NickName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 设置角色名结果
  /// </summary>
  public sealed partial class SCSetNickNameAck : pb::IMessage<SCSetNickNameAck> {
    private static readonly pb::MessageParser<SCSetNickNameAck> _parser = new pb::MessageParser<SCSetNickNameAck>(() => new SCSetNickNameAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCSetNickNameAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.ClientGameReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSetNickNameAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSetNickNameAck(SCSetNickNameAck other) : this() {
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCSetNickNameAck Clone() {
      return new SCSetNickNameAck(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private uint result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCSetNickNameAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCSetNickNameAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCSetNickNameAck other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Result = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// gm指令
  /// </summary>
  public sealed partial class CSGMCommandReq : pb::IMessage<CSGMCommandReq> {
    private static readonly pb::MessageParser<CSGMCommandReq> _parser = new pb::MessageParser<CSGMCommandReq>(() => new CSGMCommandReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSGMCommandReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.ClientGameReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGMCommandReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGMCommandReq(CSGMCommandReq other) : this() {
      gmCmd_ = other.gmCmd_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSGMCommandReq Clone() {
      return new CSGMCommandReq(this);
    }

    /// <summary>Field number for the "gm_cmd" field.</summary>
    public const int GmCmdFieldNumber = 1;
    private string gmCmd_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GmCmd {
      get { return gmCmd_; }
      set {
        gmCmd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSGMCommandReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSGMCommandReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GmCmd != other.GmCmd) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GmCmd.Length != 0) hash ^= GmCmd.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GmCmd.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GmCmd);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GmCmd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GmCmd);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSGMCommandReq other) {
      if (other == null) {
        return;
      }
      if (other.GmCmd.Length != 0) {
        GmCmd = other.GmCmd;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            GmCmd = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// gm指令结果
  /// </summary>
  public sealed partial class SCGMCommandAck : pb::IMessage<SCGMCommandAck> {
    private static readonly pb::MessageParser<SCGMCommandAck> _parser = new pb::MessageParser<SCGMCommandAck>(() => new SCGMCommandAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCGMCommandAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.ClientGameReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGMCommandAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGMCommandAck(SCGMCommandAck other) : this() {
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCGMCommandAck Clone() {
      return new SCGMCommandAck(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private bool result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCGMCommandAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCGMCommandAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != false) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != false) {
        output.WriteRawTag(8);
        output.WriteBool(Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCGMCommandAck other) {
      if (other == null) {
        return;
      }
      if (other.Result != false) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Result = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 游戏服通知gate踢人
  /// </summary>
  public sealed partial class SCKickUserNtf : pb::IMessage<SCKickUserNtf> {
    private static readonly pb::MessageParser<SCKickUserNtf> _parser = new pb::MessageParser<SCKickUserNtf>(() => new SCKickUserNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCKickUserNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.ClientGameReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCKickUserNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCKickUserNtf(SCKickUserNtf other) : this() {
      error_ = other.error_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCKickUserNtf Clone() {
      return new SCKickUserNtf(this);
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 1;
    private uint error_;
    /// <summary>
    /// 踢人的原因
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCKickUserNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCKickUserNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Error != other.Error) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Error != 0) hash ^= Error.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Error != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Error);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Error != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Error);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCKickUserNtf other) {
      if (other == null) {
        return;
      }
      if (other.Error != 0) {
        Error = other.Error;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Error = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 通用错误协议
  /// </summary>
  public sealed partial class SCErrorNtf : pb::IMessage<SCErrorNtf> {
    private static readonly pb::MessageParser<SCErrorNtf> _parser = new pb::MessageParser<SCErrorNtf>(() => new SCErrorNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCErrorNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.ClientGameReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCErrorNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCErrorNtf(SCErrorNtf other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCErrorNtf Clone() {
      return new SCErrorNtf(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCErrorNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCErrorNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCErrorNtf other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 背包道具变更通知
  /// </summary>
  public sealed partial class SCItemChangeNtf : pb::IMessage<SCItemChangeNtf> {
    private static readonly pb::MessageParser<SCItemChangeNtf> _parser = new pb::MessageParser<SCItemChangeNtf>(() => new SCItemChangeNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCItemChangeNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.ClientGameReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCItemChangeNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCItemChangeNtf(SCItemChangeNtf other) : this() {
      itemList_ = other.itemList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCItemChangeNtf Clone() {
      return new SCItemChangeNtf(this);
    }

    /// <summary>Field number for the "item_list" field.</summary>
    public const int ItemListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Game.ItemInfo> _repeated_itemList_codec
        = pb::FieldCodec.ForMessage(10, global::Game.ItemInfo.Parser);
    private readonly pbc::RepeatedField<global::Game.ItemInfo> itemList_ = new pbc::RepeatedField<global::Game.ItemInfo>();
    /// <summary>
    /// 变更列表 uid存在，则更新数量（数量为0，删除），uid不存在，则新增
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Game.ItemInfo> ItemList {
      get { return itemList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCItemChangeNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCItemChangeNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!itemList_.Equals(other.itemList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= itemList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      itemList_.WriteTo(output, _repeated_itemList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += itemList_.CalculateSize(_repeated_itemList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCItemChangeNtf other) {
      if (other == null) {
        return;
      }
      itemList_.Add(other.itemList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            itemList_.AddEntriesFrom(input, _repeated_itemList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 使用/出售道具请求
  /// </summary>
  public sealed partial class CSOperateItemReq : pb::IMessage<CSOperateItemReq> {
    private static readonly pb::MessageParser<CSOperateItemReq> _parser = new pb::MessageParser<CSOperateItemReq>(() => new CSOperateItemReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSOperateItemReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.ClientGameReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSOperateItemReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSOperateItemReq(CSOperateItemReq other) : this() {
      itemUid_ = other.itemUid_;
      itemCount_ = other.itemCount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSOperateItemReq Clone() {
      return new CSOperateItemReq(this);
    }

    /// <summary>Field number for the "item_uid" field.</summary>
    public const int ItemUidFieldNumber = 1;
    private ulong itemUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ItemUid {
      get { return itemUid_; }
      set {
        itemUid_ = value;
      }
    }

    /// <summary>Field number for the "item_count" field.</summary>
    public const int ItemCountFieldNumber = 2;
    private uint itemCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ItemCount {
      get { return itemCount_; }
      set {
        itemCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSOperateItemReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSOperateItemReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemUid != other.ItemUid) return false;
      if (ItemCount != other.ItemCount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemUid != 0UL) hash ^= ItemUid.GetHashCode();
      if (ItemCount != 0) hash ^= ItemCount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemUid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ItemUid);
      }
      if (ItemCount != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ItemCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemUid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ItemUid);
      }
      if (ItemCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ItemCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSOperateItemReq other) {
      if (other == null) {
        return;
      }
      if (other.ItemUid != 0UL) {
        ItemUid = other.ItemUid;
      }
      if (other.ItemCount != 0) {
        ItemCount = other.ItemCount;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ItemUid = input.ReadUInt64();
            break;
          }
          case 16: {
            ItemCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 使用/出售道具结果
  /// </summary>
  public sealed partial class SCOperateItemAck : pb::IMessage<SCOperateItemAck> {
    private static readonly pb::MessageParser<SCOperateItemAck> _parser = new pb::MessageParser<SCOperateItemAck>(() => new SCOperateItemAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCOperateItemAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.ClientGameReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCOperateItemAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCOperateItemAck(SCOperateItemAck other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCOperateItemAck Clone() {
      return new SCOperateItemAck(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCOperateItemAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCOperateItemAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCOperateItemAck other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 更新角色基础信息通知
  /// </summary>
  public sealed partial class SCUpdateUserBaseInfoNtf : pb::IMessage<SCUpdateUserBaseInfoNtf> {
    private static readonly pb::MessageParser<SCUpdateUserBaseInfoNtf> _parser = new pb::MessageParser<SCUpdateUserBaseInfoNtf>(() => new SCUpdateUserBaseInfoNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCUpdateUserBaseInfoNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.ClientGameReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUpdateUserBaseInfoNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUpdateUserBaseInfoNtf(SCUpdateUserBaseInfoNtf other) : this() {
      BaseInfo = other.baseInfo_ != null ? other.BaseInfo.Clone() : null;
      changeFlag_ = other.changeFlag_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCUpdateUserBaseInfoNtf Clone() {
      return new SCUpdateUserBaseInfoNtf(this);
    }

    /// <summary>Field number for the "base_info" field.</summary>
    public const int BaseInfoFieldNumber = 1;
    private global::Game.RoleBaseInfo baseInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Game.RoleBaseInfo BaseInfo {
      get { return baseInfo_; }
      set {
        baseInfo_ = value;
      }
    }

    /// <summary>Field number for the "change_flag" field.</summary>
    public const int ChangeFlagFieldNumber = 2;
    private ulong changeFlag_;
    /// <summary>
    /// 按位标记base_info的属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ChangeFlag {
      get { return changeFlag_; }
      set {
        changeFlag_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCUpdateUserBaseInfoNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCUpdateUserBaseInfoNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(BaseInfo, other.BaseInfo)) return false;
      if (ChangeFlag != other.ChangeFlag) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (baseInfo_ != null) hash ^= BaseInfo.GetHashCode();
      if (ChangeFlag != 0UL) hash ^= ChangeFlag.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (baseInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BaseInfo);
      }
      if (ChangeFlag != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ChangeFlag);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (baseInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseInfo);
      }
      if (ChangeFlag != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ChangeFlag);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCUpdateUserBaseInfoNtf other) {
      if (other == null) {
        return;
      }
      if (other.baseInfo_ != null) {
        if (baseInfo_ == null) {
          baseInfo_ = new global::Game.RoleBaseInfo();
        }
        BaseInfo.MergeFrom(other.BaseInfo);
      }
      if (other.ChangeFlag != 0UL) {
        ChangeFlag = other.ChangeFlag;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (baseInfo_ == null) {
              baseInfo_ = new global::Game.RoleBaseInfo();
            }
            input.ReadMessage(baseInfo_);
            break;
          }
          case 16: {
            ChangeFlag = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 聊天请求
  /// </summary>
  public sealed partial class CSChatReq : pb::IMessage<CSChatReq> {
    private static readonly pb::MessageParser<CSChatReq> _parser = new pb::MessageParser<CSChatReq>(() => new CSChatReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSChatReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.ClientGameReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSChatReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSChatReq(CSChatReq other) : this() {
      chatType_ = other.chatType_;
      chatMsgType_ = other.chatMsgType_;
      msgContent_ = other.msgContent_;
      toUserId_ = other.toUserId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSChatReq Clone() {
      return new CSChatReq(this);
    }

    /// <summary>Field number for the "chat_type" field.</summary>
    public const int ChatTypeFieldNumber = 1;
    private global::Game.EChatType chatType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Game.EChatType ChatType {
      get { return chatType_; }
      set {
        chatType_ = value;
      }
    }

    /// <summary>Field number for the "chat_msg_type" field.</summary>
    public const int ChatMsgTypeFieldNumber = 2;
    private global::Game.EChatMsgType chatMsgType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Game.EChatMsgType ChatMsgType {
      get { return chatMsgType_; }
      set {
        chatMsgType_ = value;
      }
    }

    /// <summary>Field number for the "msg_content" field.</summary>
    public const int MsgContentFieldNumber = 3;
    private string msgContent_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MsgContent {
      get { return msgContent_; }
      set {
        msgContent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "to_user_id" field.</summary>
    public const int ToUserIdFieldNumber = 4;
    private uint toUserId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ToUserId {
      get { return toUserId_; }
      set {
        toUserId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSChatReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSChatReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChatType != other.ChatType) return false;
      if (ChatMsgType != other.ChatMsgType) return false;
      if (MsgContent != other.MsgContent) return false;
      if (ToUserId != other.ToUserId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChatType != 0) hash ^= ChatType.GetHashCode();
      if (ChatMsgType != 0) hash ^= ChatMsgType.GetHashCode();
      if (MsgContent.Length != 0) hash ^= MsgContent.GetHashCode();
      if (ToUserId != 0) hash ^= ToUserId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChatType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ChatType);
      }
      if (ChatMsgType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ChatMsgType);
      }
      if (MsgContent.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MsgContent);
      }
      if (ToUserId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(ToUserId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChatType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ChatType);
      }
      if (ChatMsgType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ChatMsgType);
      }
      if (MsgContent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MsgContent);
      }
      if (ToUserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ToUserId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSChatReq other) {
      if (other == null) {
        return;
      }
      if (other.ChatType != 0) {
        ChatType = other.ChatType;
      }
      if (other.ChatMsgType != 0) {
        ChatMsgType = other.ChatMsgType;
      }
      if (other.MsgContent.Length != 0) {
        MsgContent = other.MsgContent;
      }
      if (other.ToUserId != 0) {
        ToUserId = other.ToUserId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            chatType_ = (global::Game.EChatType) input.ReadEnum();
            break;
          }
          case 16: {
            chatMsgType_ = (global::Game.EChatMsgType) input.ReadEnum();
            break;
          }
          case 26: {
            MsgContent = input.ReadString();
            break;
          }
          case 32: {
            ToUserId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 聊天回应
  /// </summary>
  public sealed partial class SCChatAck : pb::IMessage<SCChatAck> {
    private static readonly pb::MessageParser<SCChatAck> _parser = new pb::MessageParser<SCChatAck>(() => new SCChatAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCChatAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.ClientGameReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCChatAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCChatAck(SCChatAck other) : this() {
      chatType_ = other.chatType_;
      chatMsgType_ = other.chatMsgType_;
      msgContent_ = other.msgContent_;
      RoleBriefInfo = other.roleBriefInfo_ != null ? other.RoleBriefInfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCChatAck Clone() {
      return new SCChatAck(this);
    }

    /// <summary>Field number for the "chat_type" field.</summary>
    public const int ChatTypeFieldNumber = 1;
    private global::Game.EChatType chatType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Game.EChatType ChatType {
      get { return chatType_; }
      set {
        chatType_ = value;
      }
    }

    /// <summary>Field number for the "chat_msg_type" field.</summary>
    public const int ChatMsgTypeFieldNumber = 2;
    private global::Game.EChatMsgType chatMsgType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Game.EChatMsgType ChatMsgType {
      get { return chatMsgType_; }
      set {
        chatMsgType_ = value;
      }
    }

    /// <summary>Field number for the "msg_content" field.</summary>
    public const int MsgContentFieldNumber = 3;
    private string msgContent_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MsgContent {
      get { return msgContent_; }
      set {
        msgContent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "role_brief_info" field.</summary>
    public const int RoleBriefInfoFieldNumber = 4;
    private global::Game.RoleBriefInfo roleBriefInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Game.RoleBriefInfo RoleBriefInfo {
      get { return roleBriefInfo_; }
      set {
        roleBriefInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCChatAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCChatAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChatType != other.ChatType) return false;
      if (ChatMsgType != other.ChatMsgType) return false;
      if (MsgContent != other.MsgContent) return false;
      if (!object.Equals(RoleBriefInfo, other.RoleBriefInfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChatType != 0) hash ^= ChatType.GetHashCode();
      if (ChatMsgType != 0) hash ^= ChatMsgType.GetHashCode();
      if (MsgContent.Length != 0) hash ^= MsgContent.GetHashCode();
      if (roleBriefInfo_ != null) hash ^= RoleBriefInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChatType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ChatType);
      }
      if (ChatMsgType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ChatMsgType);
      }
      if (MsgContent.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MsgContent);
      }
      if (roleBriefInfo_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(RoleBriefInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChatType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ChatType);
      }
      if (ChatMsgType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ChatMsgType);
      }
      if (MsgContent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MsgContent);
      }
      if (roleBriefInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoleBriefInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCChatAck other) {
      if (other == null) {
        return;
      }
      if (other.ChatType != 0) {
        ChatType = other.ChatType;
      }
      if (other.ChatMsgType != 0) {
        ChatMsgType = other.ChatMsgType;
      }
      if (other.MsgContent.Length != 0) {
        MsgContent = other.MsgContent;
      }
      if (other.roleBriefInfo_ != null) {
        if (roleBriefInfo_ == null) {
          roleBriefInfo_ = new global::Game.RoleBriefInfo();
        }
        RoleBriefInfo.MergeFrom(other.RoleBriefInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            chatType_ = (global::Game.EChatType) input.ReadEnum();
            break;
          }
          case 16: {
            chatMsgType_ = (global::Game.EChatMsgType) input.ReadEnum();
            break;
          }
          case 26: {
            MsgContent = input.ReadString();
            break;
          }
          case 34: {
            if (roleBriefInfo_ == null) {
              roleBriefInfo_ = new global::Game.RoleBriefInfo();
            }
            input.ReadMessage(roleBriefInfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 添加好友请求
  /// </summary>
  public sealed partial class CSAddFriendReq : pb::IMessage<CSAddFriendReq> {
    private static readonly pb::MessageParser<CSAddFriendReq> _parser = new pb::MessageParser<CSAddFriendReq>(() => new CSAddFriendReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSAddFriendReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.ClientGameReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSAddFriendReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSAddFriendReq(CSAddFriendReq other) : this() {
      addUserId_ = other.addUserId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSAddFriendReq Clone() {
      return new CSAddFriendReq(this);
    }

    /// <summary>Field number for the "add_user_id" field.</summary>
    public const int AddUserIdFieldNumber = 1;
    private uint addUserId_;
    /// <summary>
    /// 添加的好友id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AddUserId {
      get { return addUserId_; }
      set {
        addUserId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSAddFriendReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSAddFriendReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AddUserId != other.AddUserId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AddUserId != 0) hash ^= AddUserId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AddUserId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(AddUserId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AddUserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AddUserId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSAddFriendReq other) {
      if (other == null) {
        return;
      }
      if (other.AddUserId != 0) {
        AddUserId = other.AddUserId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AddUserId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 添加好友回应
  /// </summary>
  public sealed partial class SCAddFriendAck : pb::IMessage<SCAddFriendAck> {
    private static readonly pb::MessageParser<SCAddFriendAck> _parser = new pb::MessageParser<SCAddFriendAck>(() => new SCAddFriendAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCAddFriendAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.ClientGameReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCAddFriendAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCAddFriendAck(SCAddFriendAck other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCAddFriendAck Clone() {
      return new SCAddFriendAck(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCAddFriendAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCAddFriendAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCAddFriendAck other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 好友申请通知
  /// </summary>
  public sealed partial class SCAddFriendApplyNtf : pb::IMessage<SCAddFriendApplyNtf> {
    private static readonly pb::MessageParser<SCAddFriendApplyNtf> _parser = new pb::MessageParser<SCAddFriendApplyNtf>(() => new SCAddFriendApplyNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCAddFriendApplyNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.ClientGameReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCAddFriendApplyNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCAddFriendApplyNtf(SCAddFriendApplyNtf other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCAddFriendApplyNtf Clone() {
      return new SCAddFriendApplyNtf(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCAddFriendApplyNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCAddFriendApplyNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCAddFriendApplyNtf other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 处理好友申请请求
  /// </summary>
  public sealed partial class CSOperateFriendApplyReq : pb::IMessage<CSOperateFriendApplyReq> {
    private static readonly pb::MessageParser<CSOperateFriendApplyReq> _parser = new pb::MessageParser<CSOperateFriendApplyReq>(() => new CSOperateFriendApplyReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSOperateFriendApplyReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.ClientGameReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSOperateFriendApplyReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSOperateFriendApplyReq(CSOperateFriendApplyReq other) : this() {
      targetId_ = other.targetId_;
      opType_ = other.opType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSOperateFriendApplyReq Clone() {
      return new CSOperateFriendApplyReq(this);
    }

    /// <summary>Field number for the "target_id" field.</summary>
    public const int TargetIdFieldNumber = 1;
    private uint targetId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }

    /// <summary>Field number for the "op_type" field.</summary>
    public const int OpTypeFieldNumber = 2;
    private global::Game.EFriendApplyOpType opType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Game.EFriendApplyOpType OpType {
      get { return opType_; }
      set {
        opType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSOperateFriendApplyReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSOperateFriendApplyReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TargetId != other.TargetId) return false;
      if (OpType != other.OpType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TargetId != 0) hash ^= TargetId.GetHashCode();
      if (OpType != 0) hash ^= OpType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TargetId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TargetId);
      }
      if (OpType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) OpType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TargetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetId);
      }
      if (OpType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OpType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSOperateFriendApplyReq other) {
      if (other == null) {
        return;
      }
      if (other.TargetId != 0) {
        TargetId = other.TargetId;
      }
      if (other.OpType != 0) {
        OpType = other.OpType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TargetId = input.ReadUInt32();
            break;
          }
          case 16: {
            opType_ = (global::Game.EFriendApplyOpType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 处理好友申请回应
  /// </summary>
  public sealed partial class SCOperateFriendApplyAck : pb::IMessage<SCOperateFriendApplyAck> {
    private static readonly pb::MessageParser<SCOperateFriendApplyAck> _parser = new pb::MessageParser<SCOperateFriendApplyAck>(() => new SCOperateFriendApplyAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCOperateFriendApplyAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.ClientGameReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCOperateFriendApplyAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCOperateFriendApplyAck(SCOperateFriendApplyAck other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCOperateFriendApplyAck Clone() {
      return new SCOperateFriendApplyAck(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCOperateFriendApplyAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCOperateFriendApplyAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCOperateFriendApplyAck other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 添加好友通知
  /// </summary>
  public sealed partial class SCAddFriendNtf : pb::IMessage<SCAddFriendNtf> {
    private static readonly pb::MessageParser<SCAddFriendNtf> _parser = new pb::MessageParser<SCAddFriendNtf>(() => new SCAddFriendNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCAddFriendNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.ClientGameReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCAddFriendNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCAddFriendNtf(SCAddFriendNtf other) : this() {
      friendId_ = other.friendId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCAddFriendNtf Clone() {
      return new SCAddFriendNtf(this);
    }

    /// <summary>Field number for the "friend_id" field.</summary>
    public const int FriendIdFieldNumber = 1;
    private uint friendId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FriendId {
      get { return friendId_; }
      set {
        friendId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCAddFriendNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCAddFriendNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FriendId != other.FriendId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FriendId != 0) hash ^= FriendId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FriendId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(FriendId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FriendId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FriendId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCAddFriendNtf other) {
      if (other == null) {
        return;
      }
      if (other.FriendId != 0) {
        FriendId = other.FriendId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FriendId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 删除好友请求
  /// </summary>
  public sealed partial class CSDeleteFriendReq : pb::IMessage<CSDeleteFriendReq> {
    private static readonly pb::MessageParser<CSDeleteFriendReq> _parser = new pb::MessageParser<CSDeleteFriendReq>(() => new CSDeleteFriendReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSDeleteFriendReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.ClientGameReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSDeleteFriendReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSDeleteFriendReq(CSDeleteFriendReq other) : this() {
      targetId_ = other.targetId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSDeleteFriendReq Clone() {
      return new CSDeleteFriendReq(this);
    }

    /// <summary>Field number for the "target_id" field.</summary>
    public const int TargetIdFieldNumber = 1;
    private uint targetId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSDeleteFriendReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSDeleteFriendReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TargetId != other.TargetId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TargetId != 0) hash ^= TargetId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TargetId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TargetId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TargetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSDeleteFriendReq other) {
      if (other == null) {
        return;
      }
      if (other.TargetId != 0) {
        TargetId = other.TargetId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TargetId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 删除好友回应
  /// </summary>
  public sealed partial class SCDeleteFriendAck : pb::IMessage<SCDeleteFriendAck> {
    private static readonly pb::MessageParser<SCDeleteFriendAck> _parser = new pb::MessageParser<SCDeleteFriendAck>(() => new SCDeleteFriendAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCDeleteFriendAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.ClientGameReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCDeleteFriendAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCDeleteFriendAck(SCDeleteFriendAck other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCDeleteFriendAck Clone() {
      return new SCDeleteFriendAck(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCDeleteFriendAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCDeleteFriendAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCDeleteFriendAck other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 删除好友通知
  /// </summary>
  public sealed partial class SCDeleteFriendNtf : pb::IMessage<SCDeleteFriendNtf> {
    private static readonly pb::MessageParser<SCDeleteFriendNtf> _parser = new pb::MessageParser<SCDeleteFriendNtf>(() => new SCDeleteFriendNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCDeleteFriendNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.ClientGameReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCDeleteFriendNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCDeleteFriendNtf(SCDeleteFriendNtf other) : this() {
      friendId_ = other.friendId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCDeleteFriendNtf Clone() {
      return new SCDeleteFriendNtf(this);
    }

    /// <summary>Field number for the "friend_id" field.</summary>
    public const int FriendIdFieldNumber = 1;
    private uint friendId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FriendId {
      get { return friendId_; }
      set {
        friendId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCDeleteFriendNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCDeleteFriendNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FriendId != other.FriendId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FriendId != 0) hash ^= FriendId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FriendId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(FriendId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FriendId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FriendId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCDeleteFriendNtf other) {
      if (other == null) {
        return;
      }
      if (other.FriendId != 0) {
        FriendId = other.FriendId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FriendId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 请求好友列表
  /// </summary>
  public sealed partial class CSQueryFriendListReq : pb::IMessage<CSQueryFriendListReq> {
    private static readonly pb::MessageParser<CSQueryFriendListReq> _parser = new pb::MessageParser<CSQueryFriendListReq>(() => new CSQueryFriendListReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSQueryFriendListReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.ClientGameReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSQueryFriendListReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSQueryFriendListReq(CSQueryFriendListReq other) : this() {
      userId_ = other.userId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSQueryFriendListReq Clone() {
      return new CSQueryFriendListReq(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private uint userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSQueryFriendListReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSQueryFriendListReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0) hash ^= UserId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UserId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSQueryFriendListReq other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 请求好友列表回应
  /// </summary>
  public sealed partial class SCQueryFriendListAck : pb::IMessage<SCQueryFriendListAck> {
    private static readonly pb::MessageParser<SCQueryFriendListAck> _parser = new pb::MessageParser<SCQueryFriendListAck>(() => new SCQueryFriendListAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCQueryFriendListAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.ClientGameReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCQueryFriendListAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCQueryFriendListAck(SCQueryFriendListAck other) : this() {
      error_ = other.error_;
      friendList_ = other.friendList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCQueryFriendListAck Clone() {
      return new SCQueryFriendListAck(this);
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 1;
    private int error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    /// <summary>Field number for the "friend_list" field.</summary>
    public const int FriendListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Game.RoleBriefInfo> _repeated_friendList_codec
        = pb::FieldCodec.ForMessage(18, global::Game.RoleBriefInfo.Parser);
    private readonly pbc::RepeatedField<global::Game.RoleBriefInfo> friendList_ = new pbc::RepeatedField<global::Game.RoleBriefInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Game.RoleBriefInfo> FriendList {
      get { return friendList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCQueryFriendListAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCQueryFriendListAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Error != other.Error) return false;
      if(!friendList_.Equals(other.friendList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Error != 0) hash ^= Error.GetHashCode();
      hash ^= friendList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Error != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Error);
      }
      friendList_.WriteTo(output, _repeated_friendList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Error != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      size += friendList_.CalculateSize(_repeated_friendList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCQueryFriendListAck other) {
      if (other == null) {
        return;
      }
      if (other.Error != 0) {
        Error = other.Error;
      }
      friendList_.Add(other.friendList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Error = input.ReadInt32();
            break;
          }
          case 18: {
            friendList_.AddEntriesFrom(input, _repeated_friendList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 好友体力操作请求
  /// </summary>
  public sealed partial class CSFriendPointOperateReq : pb::IMessage<CSFriendPointOperateReq> {
    private static readonly pb::MessageParser<CSFriendPointOperateReq> _parser = new pb::MessageParser<CSFriendPointOperateReq>(() => new CSFriendPointOperateReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSFriendPointOperateReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.ClientGameReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSFriendPointOperateReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSFriendPointOperateReq(CSFriendPointOperateReq other) : this() {
      targetId_ = other.targetId_;
      isSend_ = other.isSend_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSFriendPointOperateReq Clone() {
      return new CSFriendPointOperateReq(this);
    }

    /// <summary>Field number for the "target_id" field.</summary>
    public const int TargetIdFieldNumber = 1;
    private uint targetId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }

    /// <summary>Field number for the "is_send" field.</summary>
    public const int IsSendFieldNumber = 2;
    private bool isSend_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSend {
      get { return isSend_; }
      set {
        isSend_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSFriendPointOperateReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSFriendPointOperateReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TargetId != other.TargetId) return false;
      if (IsSend != other.IsSend) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TargetId != 0) hash ^= TargetId.GetHashCode();
      if (IsSend != false) hash ^= IsSend.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TargetId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TargetId);
      }
      if (IsSend != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsSend);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TargetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetId);
      }
      if (IsSend != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSFriendPointOperateReq other) {
      if (other == null) {
        return;
      }
      if (other.TargetId != 0) {
        TargetId = other.TargetId;
      }
      if (other.IsSend != false) {
        IsSend = other.IsSend;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TargetId = input.ReadUInt32();
            break;
          }
          case 16: {
            IsSend = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 好友体力操作回应
  /// </summary>
  public sealed partial class SCFriendPointOperateAck : pb::IMessage<SCFriendPointOperateAck> {
    private static readonly pb::MessageParser<SCFriendPointOperateAck> _parser = new pb::MessageParser<SCFriendPointOperateAck>(() => new SCFriendPointOperateAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCFriendPointOperateAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.ClientGameReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCFriendPointOperateAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCFriendPointOperateAck(SCFriendPointOperateAck other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCFriendPointOperateAck Clone() {
      return new SCFriendPointOperateAck(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCFriendPointOperateAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCFriendPointOperateAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCFriendPointOperateAck other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class SCFriendPointRecordNtf : pb::IMessage<SCFriendPointRecordNtf> {
    private static readonly pb::MessageParser<SCFriendPointRecordNtf> _parser = new pb::MessageParser<SCFriendPointRecordNtf>(() => new SCFriendPointRecordNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCFriendPointRecordNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.ClientGameReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCFriendPointRecordNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCFriendPointRecordNtf(SCFriendPointRecordNtf other) : this() {
      todaySendList_ = other.todaySendList_.Clone();
      todayGetList_ = other.todayGetList_.Clone();
      todayRecvList_ = other.todayRecvList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCFriendPointRecordNtf Clone() {
      return new SCFriendPointRecordNtf(this);
    }

    /// <summary>Field number for the "today_send_list" field.</summary>
    public const int TodaySendListFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_todaySendList_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> todaySendList_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///  当天发送id列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> TodaySendList {
      get { return todaySendList_; }
    }

    /// <summary>Field number for the "today_get_list" field.</summary>
    public const int TodayGetListFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_todayGetList_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> todayGetList_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///  当天接收id列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> TodayGetList {
      get { return todayGetList_; }
    }

    /// <summary>Field number for the "today_recv_list" field.</summary>
    public const int TodayRecvListFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_todayRecvList_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> todayRecvList_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///  当天领取id列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> TodayRecvList {
      get { return todayRecvList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCFriendPointRecordNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCFriendPointRecordNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!todaySendList_.Equals(other.todaySendList_)) return false;
      if(!todayGetList_.Equals(other.todayGetList_)) return false;
      if(!todayRecvList_.Equals(other.todayRecvList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= todaySendList_.GetHashCode();
      hash ^= todayGetList_.GetHashCode();
      hash ^= todayRecvList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      todaySendList_.WriteTo(output, _repeated_todaySendList_codec);
      todayGetList_.WriteTo(output, _repeated_todayGetList_codec);
      todayRecvList_.WriteTo(output, _repeated_todayRecvList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += todaySendList_.CalculateSize(_repeated_todaySendList_codec);
      size += todayGetList_.CalculateSize(_repeated_todayGetList_codec);
      size += todayRecvList_.CalculateSize(_repeated_todayRecvList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCFriendPointRecordNtf other) {
      if (other == null) {
        return;
      }
      todaySendList_.Add(other.todaySendList_);
      todayGetList_.Add(other.todayGetList_);
      todayRecvList_.Add(other.todayRecvList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            todaySendList_.AddEntriesFrom(input, _repeated_todaySendList_codec);
            break;
          }
          case 18:
          case 16: {
            todayGetList_.AddEntriesFrom(input, _repeated_todayGetList_codec);
            break;
          }
          case 26:
          case 24: {
            todayRecvList_.AddEntriesFrom(input, _repeated_todayRecvList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 收到好友体力通知
  /// </summary>
  public sealed partial class SCFriendPointRecvNtf : pb::IMessage<SCFriendPointRecvNtf> {
    private static readonly pb::MessageParser<SCFriendPointRecvNtf> _parser = new pb::MessageParser<SCFriendPointRecvNtf>(() => new SCFriendPointRecvNtf());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCFriendPointRecvNtf> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.ClientGameReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCFriendPointRecvNtf() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCFriendPointRecvNtf(SCFriendPointRecvNtf other) : this() {
      fromId_ = other.fromId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCFriendPointRecvNtf Clone() {
      return new SCFriendPointRecvNtf(this);
    }

    /// <summary>Field number for the "from_id" field.</summary>
    public const int FromIdFieldNumber = 1;
    private uint fromId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FromId {
      get { return fromId_; }
      set {
        fromId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCFriendPointRecvNtf);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCFriendPointRecvNtf other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FromId != other.FromId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FromId != 0) hash ^= FromId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FromId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(FromId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FromId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FromId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCFriendPointRecvNtf other) {
      if (other == null) {
        return;
      }
      if (other.FromId != 0) {
        FromId = other.FromId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FromId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 请求好友申请列表
  /// </summary>
  public sealed partial class CSQueryFriendApplyListReq : pb::IMessage<CSQueryFriendApplyListReq> {
    private static readonly pb::MessageParser<CSQueryFriendApplyListReq> _parser = new pb::MessageParser<CSQueryFriendApplyListReq>(() => new CSQueryFriendApplyListReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSQueryFriendApplyListReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.ClientGameReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSQueryFriendApplyListReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSQueryFriendApplyListReq(CSQueryFriendApplyListReq other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSQueryFriendApplyListReq Clone() {
      return new CSQueryFriendApplyListReq(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSQueryFriendApplyListReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSQueryFriendApplyListReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSQueryFriendApplyListReq other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 请求好友申请列表回应
  /// </summary>
  public sealed partial class SCQueryFriendApplyListAck : pb::IMessage<SCQueryFriendApplyListAck> {
    private static readonly pb::MessageParser<SCQueryFriendApplyListAck> _parser = new pb::MessageParser<SCQueryFriendApplyListAck>(() => new SCQueryFriendApplyListAck());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCQueryFriendApplyListAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Game.ClientGameReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCQueryFriendApplyListAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCQueryFriendApplyListAck(SCQueryFriendApplyListAck other) : this() {
      applyList_ = other.applyList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCQueryFriendApplyListAck Clone() {
      return new SCQueryFriendApplyListAck(this);
    }

    /// <summary>Field number for the "apply_list" field.</summary>
    public const int ApplyListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Game.RoleBriefInfo> _repeated_applyList_codec
        = pb::FieldCodec.ForMessage(10, global::Game.RoleBriefInfo.Parser);
    private readonly pbc::RepeatedField<global::Game.RoleBriefInfo> applyList_ = new pbc::RepeatedField<global::Game.RoleBriefInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Game.RoleBriefInfo> ApplyList {
      get { return applyList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCQueryFriendApplyListAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCQueryFriendApplyListAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!applyList_.Equals(other.applyList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= applyList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      applyList_.WriteTo(output, _repeated_applyList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += applyList_.CalculateSize(_repeated_applyList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCQueryFriendApplyListAck other) {
      if (other == null) {
        return;
      }
      applyList_.Add(other.applyList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            applyList_.AddEntriesFrom(input, _repeated_applyList_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
